---
title: "Suavização Exponencial"
land: "PT"
subtitle: "ME607 - Séries Temporais"
author: "Prof. Carlos Trucíos </br> ctrucios@unicamp.br"
Email: "ctrucios@unicamp.br"
institute: "Instituto de Matemática, Estatística e Computação Científica (IMECC), </br> Universidade Estadual de Campinas (UNICAMP)."
knitr:
    opts_chunk: 
      fig.align: 'center'
execute:
    message: false
    warning: false
format:
    revealjs:
        slide-number: true
        toc: true
        toc-depth: 1
        toc-title: Agenda
        self-contained: false
        chalkboard: true
        width: 1600
        height: 900
        theme: [default, styles.scss]
        incremental: true
        code-fold: true
        logo: "imagens/imecc.png"
        footer: "Carlos Trucíos (IMECC/UNICAMP)  |  ME607 - Séries Temporais  |  [ctruciosm.github.io](https://ctruciosm.github.io/)"
        highlight-style: "a11y"
        title-slide-attributes:
            data-background-image: "imagens/unicamp.png"
            data-background-size: 20%
            data-background-position: 99% 5%
            data-background-opacity: "1"
editor: source
---


# Introdução
## Introdução

- Uma das limitações dos termos de tendência utilizados nos modelos de regressão é que raramente encontramos séries com tendência determinística (linear, quadrática, cúbica) na vida real.
- Uma alternativa a este problema é utilizar splines. Contudo, seu uso para fins de  previsão é bastante limitado, pois não sabemos quantas observações passadas utilizar para estimar/predizer o valor futuro da série.
- Para superar estas limitações, surgiram os modelos de suavização exponencial. A ideia principal destes modelos é permitir com que as últimas observações da série tenham um maior peso nas previsões do que as observações mais antigas.
- Na aula de hoje veremos alguns dos métodos de suavização exponencial mais conhecidos.



# Médias Móveis
## Médias Móveis Simples

::: {.callout-warning icon=false}
### Médias Móveis

**Com fins de suavização** (como utilizado no capítulo de decomposição): 

$$\hat{Y}_t = \dfrac{Y_{t - \frac{m - 1}{2}} + \cdots + Y_t + \cdots + Y_{t + \frac{m - 1}{2}}}{m}$$

:::

. . . 

Se alterarmos a fórmula para, em lugar de considerar ambos os lados ao redor de $Y_t$, considerar apenas as últimas $m$ observações, temos: 

$$\hat{Y}_t = \dfrac{Y_{t - m + 1} + \cdots + Y_{t - 1} + Y_t}{m}$$

## Médias Móveis Simples


<center>
![**Dado que, MM utiliza a informação até o tempo T, como podemos utilizar MM para fazer previsão?**](imagens/duvida4.png){width=40%}
</center>


## Médias Móveis Simples


<center>
Para fazermos a previsão através do método de MM, utilizamos a média das passadas $m$ _observações_.
</center>


. . . 

$$\hat{Y}_{T+1 | T} = \dfrac{Y_{T - m + 1} + \cdots + Y_{T - 1} + Y_T}{m}$$

. . . 


$$\hat{Y}_{T+2 | T} = \dfrac{Y_{T - m + 2} + \cdots + Y_{T} + \hat{Y}_{T+1|T}}{m}$$


. . . 


<center>
[Fazer previsão com MM é recomendado quando a série não apresenta componentes de tendência e sazonalidade.]{style="color:red;"}
</center>


## Médias Móveis Ponderadas

Uma extensão do método de MM, com a diferença de que não todas as observações tem o mesmo pesso.


$$Y_{T+h|T} = \omega_1 Y_{T + h - m} + \cdots + \omega_nY_{T + h - 1},$$
Se $T + k > T$, então $Y_{T + k} = \hat{T}_{T + k | T}$.




. . . 

<center>
MMP permite que as últimas observações recebam pesso maior na previsão. Ademais, MMP permite lidar com padrões sazonais (mas não com tendência).
</center>



# Suavização Exponencial Simples

## Suavização Exponencial Simples

- Conceitualmente semelhante a Médias Móveis.
- MM utiliza apenas $m$ observações enquanto que SES utiliza todas as observações.
- Apropriado quando a série não tem tendência nem sazonalidade.
- Utiliza uma técnica de média ponderada, mas os pessos tem decaimento exponencial (daí o nome de `suavização exponencial`) dando maior pesso às observações mais recentes.


## Suavização Exponencial Simples



```{r}
#| echo: true
library(fpp3)
algeria_economy <- global_economy %>%
  filter(Country == "Algeria")
algeria_economy %>%
  autoplot(Exports) +
  labs(y = "% of GDP", title = "Exports: Algeria")
```

. . . 


Com este método, a previsão um passo à frente é obtida através de:

$$\hat{y}_{T+1|T} = \alpha y_{T} + (1-\alpha) \hat{y}_{T|T-1} = \hat{y}_{T|T-1} + \alpha (y_T - \hat{y}_{T|T-1}),$$ em que $0 \leq \alpha \leq 1$ é o parâmetro de suavização.


## Suavização Exponencial Simples


$$\hat{y}_{T+1|T} = \alpha y_T + (1-\alpha) \underbrace{\hat{y}_{T|T-1}}_{\alpha y_{T-1} + (1-\alpha) \hat{y}_{T - 1|T-2}}$$

. . . 

$$\hat{y}_{T+1|T} = \alpha y_T + \alpha (1-\alpha)y_{T-1} + (1-\alpha)^2 \underbrace{\hat{y}_{T-1|T-2}}_{\alpha y_{T-2} + (1-\alpha) \hat{y}_{T-2|T-3}}$$

. . . 


$$\hat{y}_{T+1|T} = \alpha y_{T} + \alpha (1-\alpha) y_{T-1} + \alpha (1-\alpha)^2 y_{T-2} + \ldots,$$

. . . 


$$\hat{y}_{T+1|T} = \alpha [y_{T} + (1-\alpha) y_{T-1} +  (1-\alpha)^2 y_{T-2} + \ldots],$$

. . . 


> Note que $(1 + (1 - \alpha) + (1-\alpha)^2+ \cdots) = 1/\alpha$. Ou seja, a previsão $\hat{y}_{T+1|T}$ é uma média ponderada (com pesos que somam 1) das observações passadas, em que, as observações mais recentes recebem maior peso.



## Suavização Exponencial Simples


```{r}
#| echo: true
library(ggplot2)
p <- 0:100
alpha <- c(0.05, 0.2, 0.4, 0.6, 0.8, 0.95)
y1 <- alpha[1] * (1 - alpha[1])^p 
y2 <- alpha[2] * (1 - alpha[2])^p 
y3 <- alpha[3] * (1 - alpha[3])^p 
y4 <- alpha[4] * (1 - alpha[4])^p 
y5 <- alpha[5] * (1 - alpha[5])^p 
y6 <- alpha[6] * (1 - alpha[6])^p 
dados <- data.frame(Pesos = c(y1, y2, y3, y4, y5, y6),
                    Alpha = c(rep("0.05", 101), rep("0.2", 101),
                    rep("0.4", 101), rep("0.6", 101), 
                    rep("0.8", 101), rep("0.95", 101)),
                    Tempo = rep(1:101, 6))
ggplot(dados) + geom_line(aes(x = Tempo, y = Pesos, color = Alpha))
```

> O peso que recebem as observações mais antigas cai rapidamente.



## Suavização Exponencial Simples


$$\hat{y}_{T+1|T} = \alpha y_{T} + \alpha (1-\alpha) y_{T-1} + \alpha (1-\alpha)^2 y_{T-2} + \ldots,$$

- Se $\alpha = 1$, o método se reduz ao método NAIVE, $\hat{y}_{T+1|T} = y_T$.
- A medida que $\alpha \rightarrow 1$, as observações mais recentes recebem um peso maior.
- Na prática, não podemos utilizar uma soma infinita mas teremos: $$\hat{y}_{T+1|T} = \alpha y_{T} + \alpha (1-\alpha) y_{T-1} + \alpha (1-\alpha)^2 y_{T-2} + \cdots + \alpha (1 - \alpha)^{T-1} \hat{y}_2,$$ em que $\hat{y}_2 = \alpha y_1 + (1 - \alpha)\underbrace{\hat{y_1}}_{l_0}.$




## Suavização Exponencial Simples


[$$\hat{y}_{T+1|T} = \alpha y_{T} + \alpha (1-\alpha) y_{T-1} + \alpha (1-\alpha)^2 y_{T-2} + \cdots + \alpha (1 - \alpha)^{T-1} \hat{y}_2.$$]{style="color:red;"}

. . . 


Note que,


- $\hat{y}_{T+1|T} = \alpha y_T + (1-\alpha) \hat{y}_{T|T-1},$
- $\hat{y}_{T|T-1} = \alpha y_{T-1} + (1-\alpha) \hat{y}_{T-1|T-2},$
- $\vdots$
- $\hat{y}_{3|2} = \alpha y_2 + (1-\alpha) \hat{y}_{2|1},$
- $\hat{y}_{2|1} = \alpha y_1 + (1-\alpha) l_0,$

. . . 

> Embora $l_0$ e $\alpha$ podem ser especificados pelo usuário, a prática comum é estimá-los.



## Suavização Exponencial Simples

Para obter os valores estimados $\hat{\alpha}$ e $\hat{l}_0$, buscamos os valores que minimizem a soma de quadrados dos resíduos, ou seja:

$$SQE = \displaystyle \sum_{t=1}^T (\underbrace{y_t - \hat{y}_{t|t-1}}_{e_t})^2 = \sum_{t=1}^T e_t^2$$


. . . 

> Infelizmente, a solução não tem forma fechada e precisaremos de métodos numéricos para encontrá-la. Na pratica, isto não será problema, utilizaremos a função `ETS()`  ou `ses()` do **R** para ajustar o modelo.


. . .

Não é dificil escrever um código para resolver o problema de minimização acima. Explore a função `optim()` do **R** (lhe sera muito útil no futuro) e tente fazer você mesmo.



## Suavização Exponencial Simples



::: {.panel-tabset}


## Dados

```{r}
#| echo: true
library(forecast)
library(TSstudio)
head(Coffee_Prices)
robusta <- Coffee_Prices[, 1]
robusta
```

## Plot


```{r}
#| echo: true
ts_plot(robusta, title = "The Robusta Coffee Monthly Prices", Ytitle = "Price in USD", Xtitle = "Year")
```


## ses()

```{r}
#| echo: true
robusta_par <- ts_split(robusta, sample.out = 12)
train <- robusta_par$train
test <- robusta_par$test
fore_ses <- ses(train, h = 12,  alpha = 0.8, initial = "simple")
fore_ses_opt <- ses(train, h = 12, initial = "optimal")
```


## ses()


:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
fore_ses$model
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
fore_ses_opt$model
```
:::

::::

Qual valor foi utilizado para $l_0$?

```{r}
head(train)
```




## ses()


```{r}
#| echo: true
test_forecast(actual = robusta,
  forecast.obj = fore_ses_opt,
  test = test)
```

:::





## Suavização Exponencial Simples



::: {.panel-tabset}

### Dados

```{r}
#| echo: true
library(fpp3)
algeria_economy <- global_economy |> 
  filter(Country == "Algeria") 
glimpse(algeria_economy)
```


### Gráfico

```{r}
#| echo: true
algeria_economy %>% autoplot(Exports)
```

Sem tendência nem sazonalidade claras, canditato perfeito para usar suavização exponencial.


### Modelo

```{r}
#| echo: true
modelo <- algeria_economy %>%
  model(ETS(Exports ~ error("A") )) # "A" para aditivo e "M" para multiplativo
report(modelo)
```


### Previsão

```{r}
#| echo: true
fore_algeria <- modelo %>% forecast(h = 6)
fore_algeria
```


### Gráfico II

```{r}
#| echo: true
fore_algeria %>% autoplot(algeria_economy) +
  geom_line(aes(y = .fitted), color = "red",  data = augment(modelo))
```


:::

## Suavização Exponencial Simples

**Intuição:**

Seja o processo gerador de dados da forma $$y_t = \mu_t + e_t,$$ em que $\mu_t$ é a media (não constante) de $y_t$.

- Seja $\hat{\mu}_{T+1|T}$ a previsão um passo à frente do nível.
- Como a média muda ao longo do tempo, podemos obter $\hat{\mu}_{T+1|T}$ como a solução de $$\displaystyle \sum_{t = 1}^T (y_t - \mu_{T+1})^2\omega_t.$$ 
- Derivando, temos que $\hat{\mu}_{T+1|T} = \displaystyle \sum_{t = 1}^T y_t \omega_t.$


## Suavização Exponencial Simples

Uma forma de fazer com que as observações recentes recebam peso maior, é fazer $\omega_t$ descrescer de forma geométrica. 


- $\omega_T = c$, $\omega_{T-1} = c\phi$, $\omega_{T-2} = c\phi^2$, $\cdots$
- $1 = c(1 + \phi + \phi^2 + \phi^3+ \cdots) = \dfrac{c}{1-\phi}$
- $\hat{\mu}_{T+1|T} = (1-\phi)y_T + (1-\phi)\phi y_{T-1} + (1-\phi)\phi^2 y_{T-2} + \cdots$

. . . 

> Se fizermos $1-\phi = \alpha$, temos a mesma Eq. do slide 9.


## Suavização Exponencial Simples

veja que o proceso da forma $y_t = \mu_t + e_t$ é um processo em que nem a tendência nem a sazonalidade são aparentes.


```{r}
#| echo: true
n <- 1000
e <- rnorm(n, 0, 5)
mu <- runif(n, -10, 10)
y <- mu + e
ts.plot(y)
```

. . . 

Suavização Exponencial Simples tem previsão "flat", i.e. $$\hat{y}_{T+h|T} = \hat{y}_{T+1|T} = \alpha y_T + (1 - \alpha) \hat{y}_{T|T-1}$$


# Método de Holt


## Método de Holt

- Também conhecido como suavização exponencial dupla.
- É uma extensão do SES.
- Baseia-se na ideia de estimar o nível (a média) e a tendência através de dois parâmetros de suavização.


. . . 



$$\hat{Y}_{T+h|T} = L_T + hT_T$$

. . . 


- **Nível:** $L_T = \alpha Y_T + (1 - \alpha) (L_{T-1} + T_{T - 1})$
- **Tendência:** $T_T = \beta(L_T - L_{T - 1}) + (1 - \beta) T_{T-1}$
- **Número de passos à frente:** $h$


## Método de Holt


Como no caso do SES, a recursão não pode ser infinita. Assim:

- $L_2 = \alpha Y_1 + (1 - \alpha) (L_1 + T_1)$
- $T_2 = \beta (L_2 - L_1) + (1 - \beta) T_1$


. . . 


<center>
[Além do $\alpha$ e $\beta$, $L_1$ e $T_1$ também precisam ser estimados.]{style="color:red;"}
</center>

. . . 


::: {.callout-warning icon=false}
## No R
As funções `holt()` do pacote `forecast` e `ETS()` do pacote `fable` implementam o método de Holt e já calcula os valores initicias de $L_1$ e $T_1$, bem como $\alpha$ e $\beta$. 
:::


## Método de Holt

- Utilizado quando a série apresenta tendência.
- A previsão envolve duas equações de suavização: uma para o nível e outra para a tendência:
  * $\text{Previsão: } \quad \hat{Y}_{T+h|T} = L_T + hT_T,$
  * $\text{Equação do Nível: } L_T = \alpha Y_T + (1 - \alpha) (L_{T-1} + T_{T - 1})$
  * $\text{Equação de Tendência: } \quad T_T = \beta(L_T - L_{T - 1}) + (1 - \beta) T_{T-1}$

. . . 

Em que $0 \leq \alpha, \beta \leq 1$. Ademais,  note que no instante $T=2$ precisaremos de $L_1$ e $T_1$

. . . 

>  Para estimar os parâmetros, minimizamos a soma de quadrados dos resíduos.





## Método de Holt


::: {.panel-tabset}

### Dados

```{r}
#| echo: true
australia_economy <- global_economy |> 
  filter(Country == "Australia") |> 
  mutate(Pop = Population / 1e6) # População em milhoes 1e6 = 10^6
glimpse(australia_economy)
```


### Gráfico

```{r}
#| echo: true
australia_economy %>% autoplot(Pop)
```

Tendência evidente.


### Modelo

```{r}
#| echo: true
modelo <- australia_economy %>%
  model(ETS(Pop ~ error("A") + trend("A")))
report(modelo)
```


### Previsão

```{r}
#| echo: true
fore_aus <- modelo %>% forecast(h = 6)
fore_aus
```


### Gráfico II

```{r}
#| echo: true
fore_aus %>% autoplot(australia_economy) +
  geom_line(aes(y = .fitted), color = "red",  data = augment(modelo)) 
```


### holt()

```{r}
#| echo: true
australia_economy_ts <- ts(australia_economy$Pop, frequency = 1, start = "1960")
#info_ts(australia_economy_ts)
fore_holt <- holt(australia_economy_ts, h = 6, initial = "optimal")
fore_holt$model
```


### Comparação

```{r}
#| echo: true
fore_aus$.mean
fore_holt$mean
```



:::


## Método de Holt com amortização

- O método de Holt (1957) assume que, para fazer a previsão, a tendência é constante nos $h$ passos à frente.
- Em 1985, foi proposto um método que amortece a tendência. Com este método as equações são definidas como:

. . . 


\begin{align} 
\hat{y}_{T+h|T} = & L_T + (\phi  + \phi^2 + \cdots + \phi^h) T_T, \\
L_T = & \alpha y_T + (1-\alpha) (L_{T-1} + \phi T_{T-1}), \\
T_T = & \beta (L_T  - L_{T-1}) + (1 - \beta) \phi T_{T-1}.
\end{align}


. . . 

> Note que se $\phi = 1$ temos o método de Holt.


## Método de Holt com tendência não constante


::: {.panel-tabset}



### Modelo

```{r}
#| echo: true
modelo <- australia_economy |> 
  model(holt = ETS(Pop ~ error("A") + trend("A")),
        amortecimento = ETS(Pop ~ error("A") + trend("Ad")))
modelo |> select(amortecimento) |> report()
```


### Previsão

```{r}
#| echo: true
fore_aus <- modelo %>% forecast(h = 6)
fore_aus
```


### Gráfico II

```{r}
#| echo: true
fore_aus |> autoplot(australia_economy, level = NULL) +
  geom_line(aes(y = .fitted, color = .model),  data = augment(modelo)) 
```

### holt()

```{r}
#| echo: true
fore_holt <- holt(australia_economy_ts, h = 6, initial = "optimal", damped = TRUE)
fore_holt$model
```

### Comparação


```{r}
#| echo: true
fore_aus$.mean[-c(1:6)]
fore_holt$mean
```

:::

  
## Método de Holt com tendência não constante


Note que, quando $h \rightarrow \infty$, $$y_{T+h|T} =  \hat{\mu}_{T|T} + (\phi  + \phi^2 + \cdots + \phi^h) \hat{\beta}_T \rightarrow l_t + \dfrac{\phi}{1-\phi} \hat{\beta}_T$$


. . . 



::: {.callout-warning icon=false}
### Observação

Quando a tendência é exponencial, podemos usar o argumento `exponential = TRUE` na função `holt()`.

:::


# Método de Holt-Winters

## Método de Holt-Winters

- É uma extensão do método de Holt.
- Lida com séries temporais que possuem tendência e sazonalidade.
- Para fazer isto, inclui um terceiro parâmetro de suavização.
- É necessário conhecer o período sazonal $m$


## Método de Holt-Winters


### Holt-Winters Aditivo

$$\hat{Y}_{T+h|T} = L_T + h T_T + S_{T + h - m (k + 1)},$$

$$L_T = \alpha (Y_T - S_{T-m}) + (1-\alpha) (L_{T-1}+  T_{T-1}),$$

$$T_T = \beta (L_T - L_{T-1}) + (1-\beta) T_{T-1},$$

$$S_T = \gamma (Y_T - L_{T-1} - T_{T-1}) + (1-\gamma) S_{T-m}.$$
Em que $k$ é a parte inteira de $(h-1)/m$.




## Método de Holt-Winters

### Holt-Winters Multiplicativo


$$\hat{Y}_{T+h|T} = (L_T + h T_T) S_{T+ h - m(k+1)},$$

$$L_t = \alpha \dfrac{Y_T}{S_{T - m}} + (1-\alpha) (L_{T-1} + T_{T-1}),$$

$$T_T = \beta (L_T - L_{T-1}) + (1-\beta) T_{T-1},$$

$$S_T = \gamma \dfrac{Y_T}{L_{T-1} + T_{T-1}} + (1-\gamma) S_{T-m}$$




## Método de Holt-Winters

Se a variação sazonal é constante utilizamos o modelo aditivo, caso contrário o multiplicativo.

. . . 

Utilizando a função `ETS()`:

```{r, eval = FALSE}
error("A") + trend("A") + season("A")  # Quando Aditivo
error("M") + trend("A") + season("M")  # Quando Multiplicativo
```


. . . 


::: {.callout-warning icon=false}
### No R
Além da função `ETS()`, as funções `HoltWinters()` do pacote `stats` e `hw()` do pacote `forecast` implementam o método de Holt-Winters. A função `hw()` permite lidar com tendências exponenciais ou amortecidas.

:::

. . . 


> Note que, além de $\alpha, \beta, \gamma$ e os valores iniciais de $L_1$ e $T_1$, precisamos valores iniciais para $S_1, \cdots, S_{m}$. Assim como nos casos anteriores, estes valores são obtidos minimizando a soma de quadrados dos resíduos.

## Método de Holt-Winters



::: {.panel-tabset}

### Dados

```{r}
#| echo: true
aus_holidays <- tourism %>% 
  filter(Purpose == "Holiday") %>%
  summarise(Trips = sum(Trips)/1000) # Agrupamos por Quarter e os valores unidades de mil. 
glimpse(aus_holidays)
```


### Gráfico

```{r}
#| echo: true
aus_holidays %>% autoplot(Trips)
```


### Modelo

```{r}
#| echo: true
modelo <- aus_holidays |> 
  model(HWA = ETS(Trips ~ error("A") + trend("A") + season("A")),
        HWM = ETS(Trips ~ error("M") + trend("A") + season("M")))
modelo |> select(HWA) |> report()
modelo |> select(HWM) |> report()
```


### Previsão

```{r}
#| echo: true
fore_holidays <- modelo %>% forecast(h = 6)
fore_holidays
```


### Gráfico II

```{r}
#| echo: true
fore_holidays |> autoplot(aus_holidays) +
  geom_line(aes(y = .fitted, color = .model), data = augment(modelo)) 
```

:::


## Método de Holt-Winters


::: {.panel-tabset}

### HoltWinters()

```{r}
#| echo: true

aus_holidays_ts <- ts(aus_holidays$Trips, frequency = 4, start = c(1998, 1))
modelo_HoltWinters <- HoltWinters(aus_holidays_ts)
fore_HoltWinters <- forecast(modelo_HoltWinters, h = 6)
modelo_HoltWinters
```



### hw()

```{r}
#| echo: true
fore_hw <- hw(aus_holidays_ts, h = 6)
fore_hw$model
```



### Comparação

```{r}
#| echo: true
fore_holidays$.mean[c(1:6)]
fore_HoltWinters$mean
fore_hw$mean
```


:::


## Método de Holt-Winters


::: {.callout-note icon=false}
### Observação
A função `HoltWinter()` utiliza uma fórmula levemente diferente, por isso $\alpha, \beta, \gamma$ estimados e os valores iniciais são diferentes. 
:::

. . . 


- Se quisermos incluir o amorcetimento na componente de tendência quando utilizamos `ETS()`, basta trocar `trend("A")` por `trend("Ad")` nos códigos do slide anterior.
- Na função `hw()` basta fazer o argumento `damped = TRUE`


## Comentários finais

- Além dos métodos mencionados, existem vários outros métodos de suavização.
- Esses métodos podem ser obtidos como as possíveis configurações que podem ser obtidas com:
  *   `error()`: A (aditivo) ou M (multiplicativo)
  *   `season()`: A, M ou N (nenhum).
  *   `trend()`: N, A, M, Ad (aditivo amortecido), Md (multiplicativo amortecido).
- A escolha não sempre é facil. Embora não sejam infalíveis, existem métodos automáticos (teste fazendo, por exemplo, `modelo <- aus_holidays |> model(auto = ETS(Trips))`.
- Maiores detalhes a respeito do procedimento automático podem ser enconrados em Hydman et al. (2002).
- Para um maior aprofundamento nos metodos de suavização exponencial, ver Hyndman et al. (2008). Link com código e erratas, [aqui](https://robjhyndman.com/expsmooth/).




## Referências

- [Hyndman, R. J., Koehler, A. B., Snyder, R. D., & Grose, S. (2002). A state space framework for automatic forecasting using exponential smoothing methods. International Journal of forecasting, 18(3), 439-454.](https://www.sciencedirect.com/science/article/abs/pii/S0169207001001108?via%3Dihub)
- [Hyndman, R., Koehler, A. B., Ord, J. K., & Snyder, R. D. (2008). Forecasting with exponential smoothing: the state space approach. Springer Science & Business Media.](https://link.springer.com/book/10.1007/978-3-540-71918-2)
- [Hyndman, R.J., & Athanasopoulos, G. (2021). Forecasting: principles and practice, 3rd edition, OTexts: Melbourne, Australia. OTexts.com/fpp3.](https://otexts.com/fpp3/). Chapter 8.
- Peña, D. (2005). Análisis de series temporales. Alianza. Capítulo 2.
-   Krispin, R. (2019). Hands-On Time Series Analysis with R: Perform time series analysis and forecasting using R. Packt Publishing Ltd. Chapter 10

